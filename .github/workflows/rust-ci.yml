name: Rust CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Format, Clippy & Build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy,rustfmt

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Build contracts
        run: |
          make sol-build

      - name: Ensure committed contract ABIs are up to date
        run: |
          set -euo pipefail
          changed="$(git status --short -- 'contracts/out/*.json' 'contracts/out/**/*.json')"
          if [ -n "$changed" ]; then
            echo "The following contract ABIs are out of date or untracked:"
            echo "$changed"
            git --no-pager diff -- 'contracts/out/*.json' 'contracts/out/**/*.json' || true
            exit 1
          fi

      - name: Check code formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features

  test:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        rust:
          - stable
          - nightly
          - 1.86 # MSRV

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Build contracts
        run: |
          make sol-build

      - name: Run tests
        run: |
          cargo test --all --all-features
          cargo test -p world-id-core --no-default-features

      - name: Build non-default features
        run: |
          cargo build -p world-id-core --no-default-features

  deny:
    name: Cargo deny
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: EmbarkStudios/cargo-deny-action@v2.0.13
        with:
          command: check ${{ matrix.checks }}

  docker:
    name: Test Docker build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - indexer
          - gateway
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        id: docker_build
        with:
          push: false
          load: true
          tags: ${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: "type=gha,mode=max"
          platforms: linux/amd64
          build-args: SERVICE_NAME=world-id-${{ matrix.service }}

      - name: Run Docker container
        run: |
          docker run -d --network host --env-file services/${{ matrix.service }}/.env.example --env RG_HTTP_ADDR=0.0.0.0:8080 --name ${{ matrix.service }}-container ${{ matrix.service }}:latest

          # Wait for the application to start
          sleep 10

          # Output logs to GitHub action
          docker logs ${{ matrix.service }}-container

      - name: Health check Docker container
        run: curl -f http://0.0.0.0:8080/health

      - name: Clean up
        run: |
          docker stop ${{ matrix.service }}-container
          docker rm ${{ matrix.service }}-container

# TODO: add docs check when relevant
#   docs:
#     name: Check docs
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#     env:
#       RUSTDOCFLAGS: -Dwarnings
#     steps:
#       - uses: actions/checkout@v4
#       - uses: dtolnay/rust-toolchain@nightly
#       - uses: dtolnay/install@cargo-docs-rs
#       - run: |
#           cargo +nightly docs-rs -p world-id
